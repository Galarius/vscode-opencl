/* !!! THIS FILE IS GENERATED WITH `make_man.py` SCRIPT !!!! */

import * as path from 'path';
import * as vscode from 'vscode';

export interface IEntry { brief: string, signature: string; description: string; reference: string }
export interface IEntries { [name: string]: IEntry; }

function openCLManFolder(): string {
    let extPath = vscode.extensions.getExtension('galarius.vscode-opencl').extensionPath
    return path.join(extPath, 'man', 'opencl_2_1');
}

var MAN_SIG = path.join(openCLManFolder(), 'signature')
var MAN_DESC = path.join(openCLManFolder(), 'description')

export var OpenCLSignatures: IEntries = {
clGetPlatformIDs:	{
		brief: 'Obtain the list of platforms available.',
		signature: path.join(MAN_SIG,'clGetPlatformIDs.txt'),
		description: path.join(MAN_DESC,'clGetPlatformIDs.md'),
		reference: 'http://man.opencl.org/clGetPlatformIDs.html',
	},
clGetPlatformInfo:	{
		brief: 'Get specific information about the OpenCL platform.',
		signature: path.join(MAN_SIG,'clGetPlatformInfo.txt'),
		description: path.join(MAN_DESC,'clGetPlatformInfo.md'),
		reference: 'http://man.opencl.org/clGetPlatformInfo.html',
	},
clGetDeviceIDs:	{
		brief: 'Obtain the list of devices available on a platform.',
		signature: path.join(MAN_SIG,'clGetDeviceIDs.txt'),
		description: path.join(MAN_DESC,'clGetDeviceIDs.md'),
		reference: 'http://man.opencl.org/clGetDeviceIDs.html',
	},
clGetDeviceInfo:	{
		brief: 'Get information about an OpenCL device.',
		signature: path.join(MAN_SIG,'clGetDeviceInfo.txt'),
		description: path.join(MAN_DESC,'clGetDeviceInfo.md'),
		reference: 'http://man.opencl.org/clGetDeviceInfo.html',
	},
clCreateSubDevices:	{
		brief: 'Creates an array of sub-devices that each reference a non-intersecting set of compute units within `in_device`.',
		signature: path.join(MAN_SIG,'clCreateSubDevices.txt'),
		description: path.join(MAN_DESC,'clCreateSubDevices.md'),
		reference: 'http://man.opencl.org/clCreateSubDevices.html',
	},
clReleaseDevice:	{
		brief: 'Decrements the `device` reference count.',
		signature: path.join(MAN_SIG,'clReleaseDevice.txt'),
		description: path.join(MAN_DESC,'clReleaseDevice.md'),
		reference: 'http://man.opencl.org/clReleaseDevice.html',
	},
clRetainDevice:	{
		brief: 'Increments the `device` reference count.',
		signature: path.join(MAN_SIG,'clRetainDevice.txt'),
		description: path.join(MAN_DESC,'clRetainDevice.md'),
		reference: 'http://man.opencl.org/clRetainDevice.html',
	},
clCreateContext:	{
		brief: 'Creates an OpenCL context.',
		signature: path.join(MAN_SIG,'clCreateContext.txt'),
		description: path.join(MAN_DESC,'clCreateContext.md'),
		reference: 'http://man.opencl.org/clCreateContext.html',
	},
clCreateContextFromType:	{
		brief: 'Create an OpenCL context from a device type that identifies the specific device(s) to use.',
		signature: path.join(MAN_SIG,'clCreateContextFromType.txt'),
		description: path.join(MAN_DESC,'clCreateContextFromType.md'),
		reference: 'http://man.opencl.org/clCreateContextFromType.html',
	},
clGetContextInfo:	{
		brief: 'Query information about a context.',
		signature: path.join(MAN_SIG,'clGetContextInfo.txt'),
		description: path.join(MAN_DESC,'clGetContextInfo.md'),
		reference: 'http://man.opencl.org/clGetContextInfo.html',
	},
clReleaseContext:	{
		brief: 'Decrement the context reference count.',
		signature: path.join(MAN_SIG,'clReleaseContext.txt'),
		description: path.join(MAN_DESC,'clReleaseContext.md'),
		reference: 'http://man.opencl.org/clReleaseContext.html',
	},
clRetainContext:	{
		brief: 'Increment the `context` reference count.',
		signature: path.join(MAN_SIG,'clRetainContext.txt'),
		description: path.join(MAN_DESC,'clRetainContext.md'),
		reference: 'http://man.opencl.org/clRetainContext.html',
	},
clCreateCommandQueueWithProperties:	{
		brief: 'Create a host or device command-queue on a specific device.',
		signature: path.join(MAN_SIG,'clCreateCommandQueueWithProperties.txt'),
		description: path.join(MAN_DESC,'clCreateCommandQueueWithProperties.md'),
		reference: 'http://man.opencl.org/clCreateCommandQueueWithProperties.html',
	},
clGetCommandQueueInfo:	{
		brief: 'Query information about a command-queue.',
		signature: path.join(MAN_SIG,'clGetCommandQueueInfo.txt'),
		description: path.join(MAN_DESC,'clGetCommandQueueInfo.md'),
		reference: 'http://man.opencl.org/clGetCommandQueueInfo.html',
	},
clReleaseCommandQueue:	{
		brief: 'Decrements the `command_queue` reference count.',
		signature: path.join(MAN_SIG,'clReleaseCommandQueue.txt'),
		description: path.join(MAN_DESC,'clReleaseCommandQueue.md'),
		reference: 'http://man.opencl.org/clReleaseCommandQueue.html',
	},
clRetainCommandQueue:	{
		brief: 'Increments the `command_queue` reference count.',
		signature: path.join(MAN_SIG,'clRetainCommandQueue.txt'),
		description: path.join(MAN_DESC,'clRetainCommandQueue.md'),
		reference: 'http://man.opencl.org/clRetainCommandQueue.html',
	},
clSetDefaultDeviceCommandQueue:	{
		brief: 'Replaces the default command queue on the device.',
		signature: path.join(MAN_SIG,'clSetDefaultDeviceCommandQueue.txt'),
		description: path.join(MAN_DESC,'clSetDefaultDeviceCommandQueue.md'),
		reference: 'http://man.opencl.org/clSetDefaultDeviceCommandQueue.html',
	},
clCreateBuffer:	{
		brief: 'Creates a buffer object.',
		signature: path.join(MAN_SIG,'clCreateBuffer.txt'),
		description: path.join(MAN_DESC,'clCreateBuffer.md'),
		reference: 'http://man.opencl.org/clCreateBuffer.html',
	},
clCreateSubBuffer:	{
		brief: 'Creates a new buffer object (referred to as a sub-buffer object) from an existing buffer object.',
		signature: path.join(MAN_SIG,'clCreateSubBuffer.txt'),
		description: path.join(MAN_DESC,'clCreateSubBuffer.md'),
		reference: 'http://man.opencl.org/clCreateSubBuffer.html',
	},
clEnqueueReadBuffer:	{
		brief: 'Enqueue commands to read from a buffer object to host memory.',
		signature: path.join(MAN_SIG,'clEnqueueReadBuffer.txt'),
		description: path.join(MAN_DESC,'clEnqueueReadBuffer.md'),
		reference: 'http://man.opencl.org/clEnqueueReadBuffer.html',
	},
clEnqueueWriteBuffer:	{
		brief: 'Enqueue commands to write to a buffer object from host memory.',
		signature: path.join(MAN_SIG,'clEnqueueWriteBuffer.txt'),
		description: path.join(MAN_DESC,'clEnqueueWriteBuffer.md'),
		reference: 'http://man.opencl.org/clEnqueueWriteBuffer.html',
	},
clEnqueueReadBufferRect:	{
		brief: 'Enqueue command to read from a 2D or 3D rectangular region from a buffer object to host memory.',
		signature: path.join(MAN_SIG,'clEnqueueReadBufferRect.txt'),
		description: path.join(MAN_DESC,'clEnqueueReadBufferRect.md'),
		reference: 'http://man.opencl.org/clEnqueueReadBufferRect.html',
	},
clEnqueueWriteBufferRect:	{
		brief: 'Enqueue command to write a 2D or 3D rectangular region to a buffer object from host memory.',
		signature: path.join(MAN_SIG,'clEnqueueWriteBufferRect.txt'),
		description: path.join(MAN_DESC,'clEnqueueWriteBufferRect.md'),
		reference: 'http://man.opencl.org/clEnqueueWriteBufferRect.html',
	},
clEnqueueCopyBuffer:	{
		brief: 'Enqueues a command to copy from one buffer object to another.',
		signature: path.join(MAN_SIG,'clEnqueueCopyBuffer.txt'),
		description: path.join(MAN_DESC,'clEnqueueCopyBuffer.md'),
		reference: 'http://man.opencl.org/clEnqueueCopyBuffer.html',
	},
clEnqueueCopyBufferRect:	{
		brief: 'Enqueues a command to copy a 2D or 3D rectangular region from a buffer object to another buffer object.',
		signature: path.join(MAN_SIG,'clEnqueueCopyBufferRect.txt'),
		description: path.join(MAN_DESC,'clEnqueueCopyBufferRect.md'),
		reference: 'http://man.opencl.org/clEnqueueCopyBufferRect.html',
	},
clEnqueueFillBuffer:	{
		brief: 'Enqueues a command to fill a buffer object with a pattern of a given pattern size.',
		signature: path.join(MAN_SIG,'clEnqueueFillBuffer.txt'),
		description: path.join(MAN_DESC,'clEnqueueFillBuffer.md'),
		reference: 'http://man.opencl.org/clEnqueueFillBuffer.html',
	},
clEnqueueMapBuffer:	{
		brief: 'Enqueues a command to map a region of the buffer object given by `buffer` into the host address space and returns a pointer to this mapped region.',
		signature: path.join(MAN_SIG,'clEnqueueMapBuffer.txt'),
		description: path.join(MAN_DESC,'clEnqueueMapBuffer.md'),
		reference: 'http://man.opencl.org/clEnqueueMapBuffer.html',
	},
clCreateImage:	{
		brief: 'Creates a 1D image, 1D image buffer, 1D image array, 2D image, 2D image array or 3D image object.',
		signature: path.join(MAN_SIG,'clCreateImage.txt'),
		description: path.join(MAN_DESC,'clCreateImage.md'),
		reference: 'http://man.opencl.org/clCreateImage.html',
	},
clEnqueueReadImage:	{
		brief: 'Enqueue commands to read from an image or image array object to host memory.',
		signature: path.join(MAN_SIG,'clEnqueueReadImage.txt'),
		description: path.join(MAN_DESC,'clEnqueueReadImage.md'),
		reference: 'http://man.opencl.org/clEnqueueReadImage.html',
	},
clEnqueueWriteImage:	{
		brief: 'Enqueues a command to write to an image or image array object from host memory.',
		signature: path.join(MAN_SIG,'clEnqueueWriteImage.txt'),
		description: path.join(MAN_DESC,'clEnqueueWriteImage.md'),
		reference: 'http://man.opencl.org/clEnqueueWriteImage.html',
	},
clEnqueueCopyImage:	{
		brief: 'Enqueues a command to copy image objects.',
		signature: path.join(MAN_SIG,'clEnqueueCopyImage.txt'),
		description: path.join(MAN_DESC,'clEnqueueCopyImage.md'),
		reference: 'http://man.opencl.org/clEnqueueCopyImage.html',
	},
clEnqueueCopyImageToBuffer:	{
		brief: 'Enqueues a command to copy an image object to a buffer object.',
		signature: path.join(MAN_SIG,'clEnqueueCopyImageToBuffer.txt'),
		description: path.join(MAN_DESC,'clEnqueueCopyImageToBuffer.md'),
		reference: 'http://man.opencl.org/clEnqueueCopyImageToBuffer.html',
	},
clEnqueueCopyBufferToImage:	{
		brief: 'Enqueues a command to copy a buffer object to an image object.',
		signature: path.join(MAN_SIG,'clEnqueueCopyBufferToImage.txt'),
		description: path.join(MAN_DESC,'clEnqueueCopyBufferToImage.md'),
		reference: 'http://man.opencl.org/clEnqueueCopyBufferToImage.html',
	},
clEnqueueFillImage:	{
		brief: 'Enqueues a command to fill an image object with a specified color.',
		signature: path.join(MAN_SIG,'clEnqueueFillImage.txt'),
		description: path.join(MAN_DESC,'clEnqueueFillImage.md'),
		reference: 'http://man.opencl.org/clEnqueueFillImage.html',
	},
clEnqueueMapImage:	{
		brief: 'Enqueues a command to map a region of an image object into the host address space and returns a pointer to this mapped region.',
		signature: path.join(MAN_SIG,'clEnqueueMapImage.txt'),
		description: path.join(MAN_DESC,'clEnqueueMapImage.md'),
		reference: 'http://man.opencl.org/clEnqueueMapImage.html',
	},
clGetImageInfo:	{
		brief: 'Get information specific to an image object created with clCreateImage.',
		signature: path.join(MAN_SIG,'clGetImageInfo.txt'),
		description: path.join(MAN_DESC,'clGetImageInfo.md'),
		reference: 'http://man.opencl.org/clGetImageInfo.html',
	},
clGetSupportedImageFormats:	{
		brief: 'Get the list of image formats supported by an OpenCL implementation.',
		signature: path.join(MAN_SIG,'clGetSupportedImageFormats.txt'),
		description: path.join(MAN_DESC,'clGetSupportedImageFormats.md'),
		reference: 'http://man.opencl.org/clGetSupportedImageFormats.html',
	},
cl_image_desc:	{
		brief: 'The image descriptor structure describes the type and dimensions of the image or image array and is defined as:',
		signature: path.join(MAN_SIG,'cl_image_desc.txt'),
		description: path.join(MAN_DESC,'cl_image_desc.md'),
		reference: 'http://man.opencl.org/cl_image_desc.html',
	},
cl_image_format:	{
		brief: 'The image format descriptor structure is defined as:',
		signature: path.join(MAN_SIG,'cl_image_format.txt'),
		description: path.join(MAN_DESC,'cl_image_format.md'),
		reference: 'http://man.opencl.org/cl_image_format.html',
	},
clEnqueueUnmapMemObject:	{
		brief: 'Enqueues a command to unmap a previously mapped region of a memory object.',
		signature: path.join(MAN_SIG,'clEnqueueUnmapMemObject.txt'),
		description: path.join(MAN_DESC,'clEnqueueUnmapMemObject.md'),
		reference: 'http://man.opencl.org/clEnqueueUnmapMemObject.html',
	},
clEnqueueMigrateMemObjects:	{
		brief: 'Enqueues a command to indicate which device a set of memory objects should be associated with.',
		signature: path.join(MAN_SIG,'clEnqueueMigrateMemObjects.txt'),
		description: path.join(MAN_DESC,'clEnqueueMigrateMemObjects.md'),
		reference: 'http://man.opencl.org/clEnqueueMigrateMemObjects.html',
	},
clGetMemObjectInfo:	{
		brief: 'Get information that is common to all memory objects (buffer and image objects).',
		signature: path.join(MAN_SIG,'clGetMemObjectInfo.txt'),
		description: path.join(MAN_DESC,'clGetMemObjectInfo.md'),
		reference: 'http://man.opencl.org/clGetMemObjectInfo.html',
	},
clRetainMemObject:	{
		brief: 'Increments the memory object reference count.',
		signature: path.join(MAN_SIG,'clRetainMemObject.txt'),
		description: path.join(MAN_DESC,'clRetainMemObject.md'),
		reference: 'http://man.opencl.org/clRetainMemObject.html',
	},
clReleaseMemObject:	{
		brief: 'Decrements the memory object reference count.',
		signature: path.join(MAN_SIG,'clReleaseMemObject.txt'),
		description: path.join(MAN_DESC,'clReleaseMemObject.md'),
		reference: 'http://man.opencl.org/clReleaseMemObject.html',
	},
clSetMemObjectDestructorCallback:	{
		brief: 'Registers a user callback function with a memory object.',
		signature: path.join(MAN_SIG,'clSetMemObjectDestructorCallback.txt'),
		description: path.join(MAN_DESC,'clSetMemObjectDestructorCallback.md'),
		reference: 'http://man.opencl.org/clSetMemObjectDestructorCallback.html',
	},
clCreateSamplerWithProperties:	{
		brief: 'Creates a sampler object.',
		signature: path.join(MAN_SIG,'clCreateSamplerWithProperties.txt'),
		description: path.join(MAN_DESC,'clCreateSamplerWithProperties.md'),
		reference: 'http://man.opencl.org/clCreateSamplerWithProperties.html',
	},
clReleaseSampler:	{
		brief: 'Decrements the sampler reference count.',
		signature: path.join(MAN_SIG,'clReleaseSampler.txt'),
		description: path.join(MAN_DESC,'clReleaseSampler.md'),
		reference: 'http://man.opencl.org/clReleaseSampler.html',
	},
clRetainSampler:	{
		brief: 'Increments the sampler reference count.',
		signature: path.join(MAN_SIG,'clRetainSampler.txt'),
		description: path.join(MAN_DESC,'clRetainSampler.md'),
		reference: 'http://man.opencl.org/clRetainSampler.html',
	},
clGetSamplerInfo:	{
		brief: 'Returns information about the sampler object.',
		signature: path.join(MAN_SIG,'clGetSamplerInfo.txt'),
		description: path.join(MAN_DESC,'clGetSamplerInfo.md'),
		reference: 'http://man.opencl.org/clGetSamplerInfo.html',
	},
clBuildProgram:	{
		brief: 'Builds (compiles and links) a program executable from the program source or binary.',
		signature: path.join(MAN_SIG,'clBuildProgram.txt'),
		description: path.join(MAN_DESC,'clBuildProgram.md'),
		reference: 'http://man.opencl.org/clBuildProgram.html',
	},
clCompileProgram:	{
		brief: 'Compiles a program’s source for all the devices or a specific device(s) in the OpenCL context associated with `program`.',
		signature: path.join(MAN_SIG,'clCompileProgram.txt'),
		description: path.join(MAN_DESC,'clCompileProgram.md'),
		reference: 'http://man.opencl.org/clCompileProgram.html',
	},
clCreateProgramWithSource:	{
		brief: 'Creates a program object for a context, and loads the source code specified by the text strings in the `strings` array into the program object.',
		signature: path.join(MAN_SIG,'clCreateProgramWithSource.txt'),
		description: path.join(MAN_DESC,'clCreateProgramWithSource.md'),
		reference: 'http://man.opencl.org/clCreateProgramWithSource.html',
	},
clCreateProgramWithBinary:	{
		brief: 'Creates a program object for a context, and loads the binary bits specified by `binary` into the program object.',
		signature: path.join(MAN_SIG,'clCreateProgramWithBinary.txt'),
		description: path.join(MAN_DESC,'clCreateProgramWithBinary.md'),
		reference: 'http://man.opencl.org/clCreateProgramWithBinary.html',
	},
clCreateProgramWithBuiltInKernels:	{
		brief: 'Creates a program object for a context, and loads the information related to the built-in kernels into a program object.',
		signature: path.join(MAN_SIG,'clCreateProgramWithBuiltInKernels.txt'),
		description: path.join(MAN_DESC,'clCreateProgramWithBuiltInKernels.md'),
		reference: 'http://man.opencl.org/clCreateProgramWithBuiltInKernels.html',
	},
clCreateProgramWithIL:	{
		brief: 'Creates a program object for a context, and loads the IL into the program object.',
		signature: path.join(MAN_SIG,'clCreateProgramWithIL.txt'),
		description: path.join(MAN_DESC,'clCreateProgramWithIL.md'),
		reference: 'http://man.opencl.org/clCreateProgramWithIL.html',
	},
clGetProgramBuildInfo:	{
		brief: 'Returns build information for each device in the program object.',
		signature: path.join(MAN_SIG,'clGetProgramBuildInfo.txt'),
		description: path.join(MAN_DESC,'clGetProgramBuildInfo.md'),
		reference: 'http://man.opencl.org/clGetProgramBuildInfo.html',
	},
clGetProgramInfo:	{
		brief: 'Returns information about the program object.',
		signature: path.join(MAN_SIG,'clGetProgramInfo.txt'),
		description: path.join(MAN_DESC,'clGetProgramInfo.md'),
		reference: 'http://man.opencl.org/clGetProgramInfo.html',
	},
clLinkProgram:	{
		brief: 'Links a set of compiled program objects and libraries for all the devices or a specific device(s) in the OpenCL context and creates a library or executable.',
		signature: path.join(MAN_SIG,'clLinkProgram.txt'),
		description: path.join(MAN_DESC,'clLinkProgram.md'),
		reference: 'http://man.opencl.org/clLinkProgram.html',
	},
clReleaseProgram:	{
		brief: 'Decrements the `program` reference count.',
		signature: path.join(MAN_SIG,'clReleaseProgram.txt'),
		description: path.join(MAN_DESC,'clReleaseProgram.md'),
		reference: 'http://man.opencl.org/clReleaseProgram.html',
	},
clRetainProgram:	{
		brief: 'Increments the `program` reference count.',
		signature: path.join(MAN_SIG,'clRetainProgram.txt'),
		description: path.join(MAN_DESC,'clRetainProgram.md'),
		reference: 'http://man.opencl.org/clRetainProgram.html',
	},
clUnloadPlatformCompiler:	{
		brief: 'Allows the implementation to release the resources allocated by the OpenCL compiler for `platform`.',
		signature: path.join(MAN_SIG,'clUnloadPlatformCompiler.txt'),
		description: path.join(MAN_DESC,'clUnloadPlatformCompiler.md'),
		reference: 'http://man.opencl.org/clUnloadPlatformCompiler.html',
	},
clCloneKernel:	{
		brief: 'Make a shallow copy of the kernel object.',
		signature: path.join(MAN_SIG,'clCloneKernel.txt'),
		description: path.join(MAN_DESC,'clCloneKernel.md'),
		reference: 'http://man.opencl.org/clCloneKernel.html',
	},
clCreateKernel:	{
		brief: 'Creates a kernel object.',
		signature: path.join(MAN_SIG,'clCreateKernel.txt'),
		description: path.join(MAN_DESC,'clCreateKernel.md'),
		reference: 'http://man.opencl.org/clCreateKernel.html',
	},
clCreateKernelsInProgram:	{
		brief: 'Creates kernel objects for all kernel functions in a program object.',
		signature: path.join(MAN_SIG,'clCreateKernelsInProgram.txt'),
		description: path.join(MAN_DESC,'clCreateKernelsInProgram.md'),
		reference: 'http://man.opencl.org/clCreateKernelsInProgram.html',
	},
clGetKernelInfo:	{
		brief: 'Returns information about the kernel object.',
		signature: path.join(MAN_SIG,'clGetKernelInfo.txt'),
		description: path.join(MAN_DESC,'clGetKernelInfo.md'),
		reference: 'http://man.opencl.org/clGetKernelInfo.html',
	},
clGetKernelArgInfo:	{
		brief: 'Returns information about the arguments of a kernel.',
		signature: path.join(MAN_SIG,'clGetKernelArgInfo.txt'),
		description: path.join(MAN_DESC,'clGetKernelArgInfo.md'),
		reference: 'http://man.opencl.org/clGetKernelArgInfo.html',
	},
clGetKernelSubGroupInfo:	{
		brief: 'Returns information about the kernel object.',
		signature: path.join(MAN_SIG,'clGetKernelSubGroupInfo.txt'),
		description: path.join(MAN_DESC,'clGetKernelSubGroupInfo.md'),
		reference: 'http://man.opencl.org/clGetKernelSubGroupInfo.html',
	},
clGetKernelWorkGroupInfo:	{
		brief: 'Returns information about the kernel object that may be specific to a device.',
		signature: path.join(MAN_SIG,'clGetKernelWorkGroupInfo.txt'),
		description: path.join(MAN_DESC,'clGetKernelWorkGroupInfo.md'),
		reference: 'http://man.opencl.org/clGetKernelWorkGroupInfo.html',
	},
clReleaseKernel:	{
		brief: 'Decrements the kernel reference count.',
		signature: path.join(MAN_SIG,'clReleaseKernel.txt'),
		description: path.join(MAN_DESC,'clReleaseKernel.md'),
		reference: 'http://man.opencl.org/clReleaseKernel.html',
	},
clRetainKernel:	{
		brief: 'Increments the kernel object reference count.',
		signature: path.join(MAN_SIG,'clRetainKernel.txt'),
		description: path.join(MAN_DESC,'clRetainKernel.md'),
		reference: 'http://man.opencl.org/clRetainKernel.html',
	},
clSetKernelArg:	{
		brief: 'Set the argument value for a specific argument of a kernel.',
		signature: path.join(MAN_SIG,'clSetKernelArg.txt'),
		description: path.join(MAN_DESC,'clSetKernelArg.md'),
		reference: 'http://man.opencl.org/clSetKernelArg.html',
	},
clSetKernelArgSVMPointer:	{
		brief: 'Set a SVM pointer as the argument value for a specific argument of a kernel.',
		signature: path.join(MAN_SIG,'clSetKernelArgSVMPointer.txt'),
		description: path.join(MAN_DESC,'clSetKernelArgSVMPointer.md'),
		reference: 'http://man.opencl.org/clSetKernelArgSVMPointer.html',
	},
clSetKernelExecInfo:	{
		brief: 'Pass additional information other than argument values to a kernel.',
		signature: path.join(MAN_SIG,'clSetKernelExecInfo.txt'),
		description: path.join(MAN_DESC,'clSetKernelExecInfo.md'),
		reference: 'http://man.opencl.org/clSetKernelExecInfo.html',
	},
clEnqueueNDRangeKernel:	{
		brief: 'Enqueues a command to execute a kernel on a device.',
		signature: path.join(MAN_SIG,'clEnqueueNDRangeKernel.txt'),
		description: path.join(MAN_DESC,'clEnqueueNDRangeKernel.md'),
		reference: 'http://man.opencl.org/clEnqueueNDRangeKernel.html',
	},
clEnqueueNativeKernel:	{
		brief: 'Enqueues a command to execute a native C/C++ function not compiled using the OpenCL compiler.',
		signature: path.join(MAN_SIG,'clEnqueueNativeKernel.txt'),
		description: path.join(MAN_DESC,'clEnqueueNativeKernel.md'),
		reference: 'http://man.opencl.org/clEnqueueNativeKernel.html',
	},
clCreateUserEvent:	{
		brief: 'Creates a user event object.',
		signature: path.join(MAN_SIG,'clCreateUserEvent.txt'),
		description: path.join(MAN_DESC,'clCreateUserEvent.md'),
		reference: 'http://man.opencl.org/clCreateUserEvent.html',
	},
clGetEventInfo:	{
		brief: 'Returns information about the event object.',
		signature: path.join(MAN_SIG,'clGetEventInfo.txt'),
		description: path.join(MAN_DESC,'clGetEventInfo.md'),
		reference: 'http://man.opencl.org/clGetEventInfo.html',
	},
clReleaseEvent:	{
		brief: 'Decrements the `event` reference count.',
		signature: path.join(MAN_SIG,'clReleaseEvent.txt'),
		description: path.join(MAN_DESC,'clReleaseEvent.md'),
		reference: 'http://man.opencl.org/clReleaseEvent.html',
	},
clRetainEvent:	{
		brief: 'Increments the `event` reference count.',
		signature: path.join(MAN_SIG,'clRetainEvent.txt'),
		description: path.join(MAN_DESC,'clRetainEvent.md'),
		reference: 'http://man.opencl.org/clRetainEvent.html',
	},
clSetEventCallback:	{
		brief: 'Registers a user callback function for a specific command execution status.',
		signature: path.join(MAN_SIG,'clSetEventCallback.txt'),
		description: path.join(MAN_DESC,'clSetEventCallback.md'),
		reference: 'http://man.opencl.org/clSetEventCallback.html',
	},
clSetUserEventStatus:	{
		brief: 'Sets the execution status of a user event object.',
		signature: path.join(MAN_SIG,'clSetUserEventStatus.txt'),
		description: path.join(MAN_DESC,'clSetUserEventStatus.md'),
		reference: 'http://man.opencl.org/clSetUserEventStatus.html',
	},
clWaitForEvents:	{
		brief: 'Waits on the host thread for commands identified by event objects to complete.',
		signature: path.join(MAN_SIG,'clWaitForEvents.txt'),
		description: path.join(MAN_DESC,'clWaitForEvents.md'),
		reference: 'http://man.opencl.org/clWaitForEvents.html',
	},
clEnqueueBarrierWithWaitList:	{
		brief: 'A synchronization point that enqueues a barrier operation.',
		signature: path.join(MAN_SIG,'clEnqueueBarrierWithWaitList.txt'),
		description: path.join(MAN_DESC,'clEnqueueBarrierWithWaitList.md'),
		reference: 'http://man.opencl.org/clEnqueueBarrierWithWaitList.html',
	},
clEnqueueMarkerWithWaitList:	{
		brief: 'Enqueues a marker command which waits for either a list of events to complete, or all previously enqueued commands to complete.',
		signature: path.join(MAN_SIG,'clEnqueueMarkerWithWaitList.txt'),
		description: path.join(MAN_DESC,'clEnqueueMarkerWithWaitList.md'),
		reference: 'http://man.opencl.org/clEnqueueMarkerWithWaitList.html',
	},
clGetDeviceAndHostTimer:	{
		brief: 'Returns a reasonably synchronized pair of timestamps from the device timer and the host timer as seen by device.',
		signature: path.join(MAN_SIG,'clGetDeviceAndHostTimer.txt'),
		description: path.join(MAN_DESC,'clGetDeviceAndHostTimer.md'),
		reference: 'http://man.opencl.org/clGetDeviceAndHostTimer.html',
	},
clGetEventProfilingInfo:	{
		brief: 'Returns profiling information for the command associated with event if profiling is enabled.',
		signature: path.join(MAN_SIG,'clGetEventProfilingInfo.txt'),
		description: path.join(MAN_DESC,'clGetEventProfilingInfo.md'),
		reference: 'http://man.opencl.org/clGetEventProfilingInfo.html',
	},
clGetHostTimer:	{
		brief: 'Return the current value of the host clock as seen by device.',
		signature: path.join(MAN_SIG,'clGetHostTimer.txt'),
		description: path.join(MAN_DESC,'clGetHostTimer.md'),
		reference: 'http://man.opencl.org/clGetHostTimer.html',
	},
clFlush:	{
		brief: 'Issues all previously queued OpenCL commands in a command-queue to the device associated with the command-queue.',
		signature: path.join(MAN_SIG,'clFlush.txt'),
		description: path.join(MAN_DESC,'clFlush.md'),
		reference: 'http://man.opencl.org/clFlush.html',
	},
clFinish:	{
		brief: 'Blocks until all previously queued OpenCL commands in a command-queue are issued to the associated device and have completed.',
		signature: path.join(MAN_SIG,'clFinish.txt'),
		description: path.join(MAN_DESC,'clFinish.md'),
		reference: 'http://man.opencl.org/clFinish.html',
	},
clCreatePipe:	{
		brief: 'Creates a pipe object.',
		signature: path.join(MAN_SIG,'clCreatePipe.txt'),
		description: path.join(MAN_DESC,'clCreatePipe.md'),
		reference: 'http://man.opencl.org/clCreatePipe.html',
	},
clGetPipeInfo:	{
		brief: 'Get information specific to a pipe object created with clCreatePipe.',
		signature: path.join(MAN_SIG,'clGetPipeInfo.txt'),
		description: path.join(MAN_DESC,'clGetPipeInfo.md'),
		reference: 'http://man.opencl.org/clGetPipeInfo.html',
	},
clSVMAlloc:	{
		brief: 'Allocates a shared virtual memory (SVM) buffer that can be shared by the host and all devices in an OpenCL context that support shared virtual memory.',
		signature: path.join(MAN_SIG,'clSVMAlloc.txt'),
		description: path.join(MAN_DESC,'clSVMAlloc.md'),
		reference: 'http://man.opencl.org/clSVMAlloc.html',
	},
clSVMFree:	{
		brief: 'Frees a shared virtual memory buffer allocated using clSVMAlloc.',
		signature: path.join(MAN_SIG,'clSVMFree.txt'),
		description: path.join(MAN_DESC,'clSVMFree.md'),
		reference: 'http://man.opencl.org/clSVMFree.html',
	},
clEnqueueSVMFree:	{
		brief: 'Enqueues a command to free the shared virtual memory allocated using clSVMAlloc or a shared system memory pointer.',
		signature: path.join(MAN_SIG,'clEnqueueSVMFree.txt'),
		description: path.join(MAN_DESC,'clEnqueueSVMFree.md'),
		reference: 'http://man.opencl.org/clEnqueueSVMFree.html',
	},
clEnqueueSVMMap:	{
		brief: 'Enqueues a command that will allow the host to update a region of a SVM buffer',
		signature: path.join(MAN_SIG,'clEnqueueSVMMap.txt'),
		description: path.join(MAN_DESC,'clEnqueueSVMMap.md'),
		reference: 'http://man.opencl.org/clEnqueueSVMMap.html',
	},
clEnqueueSVMMemcpy:	{
		brief: 'Enqueues a command to do a memcpy operation.',
		signature: path.join(MAN_SIG,'clEnqueueSVMMemcpy.txt'),
		description: path.join(MAN_DESC,'clEnqueueSVMMemcpy.md'),
		reference: 'http://man.opencl.org/clEnqueueSVMMemcpy.html',
	},
clEnqueueSVMMemFill:	{
		brief: 'Enqueues a command to fill a region in memory with a pattern of a given pattern size.',
		signature: path.join(MAN_SIG,'clEnqueueSVMMemFill.txt'),
		description: path.join(MAN_DESC,'clEnqueueSVMMemFill.md'),
		reference: 'http://man.opencl.org/clEnqueueSVMMemFill.html',
	},
clEnqueueSVMMigrateMem:	{
		brief: 'Enqueues a command to indicate which device a set of ranges of SVM allocations should be associated with.',
		signature: path.join(MAN_SIG,'clEnqueueSVMMigrateMem.txt'),
		description: path.join(MAN_DESC,'clEnqueueSVMMigrateMem.md'),
		reference: 'http://man.opencl.org/clEnqueueSVMMigrateMem.html',
	},
clEnqueueSVMUnmap:	{
		brief: 'Enqueues a command to indicate that the host has completed updating the region given by `svm_ptr` and which was specified in a previous call to clEnqueueSVMMap.',
		signature: path.join(MAN_SIG,'clEnqueueSVMUnmap.txt'),
		description: path.join(MAN_DESC,'clEnqueueSVMUnmap.md'),
		reference: 'http://man.opencl.org/clEnqueueSVMUnmap.html',
	},
acos:	{
		brief: 'Arc cosine functions.',
		signature: path.join(MAN_SIG,'acos.txt'),
		description: path.join(MAN_DESC,'acos.md'),
		reference: 'http://man.opencl.org/acos.html',
	},
acosh:	{
		brief: 'Arc cosine functions.',
		signature: path.join(MAN_SIG,'acos.txt'),
		description: path.join(MAN_DESC,'acos.md'),
		reference: 'http://man.opencl.org/acos.html',
	},
acospi:	{
		brief: 'Arc cosine functions.',
		signature: path.join(MAN_SIG,'acos.txt'),
		description: path.join(MAN_DESC,'acos.md'),
		reference: 'http://man.opencl.org/acos.html',
	},
asin:	{
		brief: 'Sine functions.',
		signature: path.join(MAN_SIG,'asin.txt'),
		description: path.join(MAN_DESC,'asin.md'),
		reference: 'http://man.opencl.org/asin.html',
	},
asinh:	{
		brief: 'Sine functions.',
		signature: path.join(MAN_SIG,'asin.txt'),
		description: path.join(MAN_DESC,'asin.md'),
		reference: 'http://man.opencl.org/asin.html',
	},
asinpi:	{
		brief: 'Sine functions.',
		signature: path.join(MAN_SIG,'asin.txt'),
		description: path.join(MAN_DESC,'asin.md'),
		reference: 'http://man.opencl.org/asin.html',
	},
atan:	{
		brief: 'Tangent functions.',
		signature: path.join(MAN_SIG,'atan.txt'),
		description: path.join(MAN_DESC,'atan.md'),
		reference: 'http://man.opencl.org/atan.html',
	},
atan2:	{
		brief: 'Tangent functions.',
		signature: path.join(MAN_SIG,'atan.txt'),
		description: path.join(MAN_DESC,'atan.md'),
		reference: 'http://man.opencl.org/atan.html',
	},
atanh:	{
		brief: 'Tangent functions.',
		signature: path.join(MAN_SIG,'atan.txt'),
		description: path.join(MAN_DESC,'atan.md'),
		reference: 'http://man.opencl.org/atan.html',
	},
atanpi:	{
		brief: 'Tangent functions.',
		signature: path.join(MAN_SIG,'atan.txt'),
		description: path.join(MAN_DESC,'atan.md'),
		reference: 'http://man.opencl.org/atan.html',
	},
atan2pi:	{
		brief: 'Tangent functions.',
		signature: path.join(MAN_SIG,'atan.txt'),
		description: path.join(MAN_DESC,'atan.md'),
		reference: 'http://man.opencl.org/atan.html',
	},
cbrt:	{
		brief: 'Computes cube-root.',
		signature: path.join(MAN_SIG,'cbrt.txt'),
		description: path.join(MAN_DESC,'cbrt.md'),
		reference: 'http://man.opencl.org/cbrt.html',
	},
ceil:	{
		brief: 'Round to integer toward + infinity.',
		signature: path.join(MAN_SIG,'ceil.txt'),
		description: path.join(MAN_DESC,'ceil.md'),
		reference: 'http://man.opencl.org/ceil.html',
	},
copysign:	{
		brief: '`x` with sign changed to sign of `y`.',
		signature: path.join(MAN_SIG,'copysign.txt'),
		description: path.join(MAN_DESC,'copysign.md'),
		reference: 'http://man.opencl.org/copysign.html',
	},
cos:	{
		brief: 'Cosine functions.',
		signature: path.join(MAN_SIG,'cos.txt'),
		description: path.join(MAN_DESC,'cos.md'),
		reference: 'http://man.opencl.org/cos.html',
	},
cosh:	{
		brief: 'Cosine functions.',
		signature: path.join(MAN_SIG,'cos.txt'),
		description: path.join(MAN_DESC,'cos.md'),
		reference: 'http://man.opencl.org/cos.html',
	},
cospi:	{
		brief: 'Cosine functions.',
		signature: path.join(MAN_SIG,'cos.txt'),
		description: path.join(MAN_DESC,'cos.md'),
		reference: 'http://man.opencl.org/cos.html',
	},
half_cos:	{
		brief: 'Cosine functions.',
		signature: path.join(MAN_SIG,'cos.txt'),
		description: path.join(MAN_DESC,'cos.md'),
		reference: 'http://man.opencl.org/cos.html',
	},
native_cos:	{
		brief: 'Cosine functions.',
		signature: path.join(MAN_SIG,'cos.txt'),
		description: path.join(MAN_DESC,'cos.md'),
		reference: 'http://man.opencl.org/cos.html',
	},
erf:	{
		brief: 'Error functions.',
		signature: path.join(MAN_SIG,'erf.txt'),
		description: path.join(MAN_DESC,'erf.md'),
		reference: 'http://man.opencl.org/erf.html',
	},
erfc:	{
		brief: 'Error functions.',
		signature: path.join(MAN_SIG,'erf.txt'),
		description: path.join(MAN_DESC,'erf.md'),
		reference: 'http://man.opencl.org/erf.html',
	},
exp:	{
		brief: 'Exponent functions.',
		signature: path.join(MAN_SIG,'exp.txt'),
		description: path.join(MAN_DESC,'exp.md'),
		reference: 'http://man.opencl.org/exp.html',
	},
exp2:	{
		brief: 'Exponent functions.',
		signature: path.join(MAN_SIG,'exp.txt'),
		description: path.join(MAN_DESC,'exp.md'),
		reference: 'http://man.opencl.org/exp.html',
	},
exp10:	{
		brief: 'Exponent functions.',
		signature: path.join(MAN_SIG,'exp.txt'),
		description: path.join(MAN_DESC,'exp.md'),
		reference: 'http://man.opencl.org/exp.html',
	},
expm1:	{
		brief: 'Exponent functions.',
		signature: path.join(MAN_SIG,'exp.txt'),
		description: path.join(MAN_DESC,'exp.md'),
		reference: 'http://man.opencl.org/exp.html',
	},
half_exp:	{
		brief: 'Exponent functions.',
		signature: path.join(MAN_SIG,'exp.txt'),
		description: path.join(MAN_DESC,'exp.md'),
		reference: 'http://man.opencl.org/exp.html',
	},
half_exp2:	{
		brief: 'Exponent functions.',
		signature: path.join(MAN_SIG,'exp.txt'),
		description: path.join(MAN_DESC,'exp.md'),
		reference: 'http://man.opencl.org/exp.html',
	},
half_exp10:	{
		brief: 'Exponent functions.',
		signature: path.join(MAN_SIG,'exp.txt'),
		description: path.join(MAN_DESC,'exp.md'),
		reference: 'http://man.opencl.org/exp.html',
	},
native_exp:	{
		brief: 'Exponent functions.',
		signature: path.join(MAN_SIG,'exp.txt'),
		description: path.join(MAN_DESC,'exp.md'),
		reference: 'http://man.opencl.org/exp.html',
	},
native_exp2:	{
		brief: 'Exponent functions.',
		signature: path.join(MAN_SIG,'exp.txt'),
		description: path.join(MAN_DESC,'exp.md'),
		reference: 'http://man.opencl.org/exp.html',
	},
native_exp10:	{
		brief: 'Exponent functions.',
		signature: path.join(MAN_SIG,'exp.txt'),
		description: path.join(MAN_DESC,'exp.md'),
		reference: 'http://man.opencl.org/exp.html',
	},
fabs:	{
		brief: 'Compute absolute value of a floating-point number.',
		signature: path.join(MAN_SIG,'fabs.txt'),
		description: path.join(MAN_DESC,'fabs.md'),
		reference: 'http://man.opencl.org/fabs.html',
	},
fdim:	{
		brief: 'Positive difference between `x` and `y`.',
		signature: path.join(MAN_SIG,'fdim.txt'),
		description: path.join(MAN_DESC,'fdim.md'),
		reference: 'http://man.opencl.org/fdim.html',
	},
floor:	{
		brief: 'Round to integer toward negative infinity.',
		signature: path.join(MAN_SIG,'floor.txt'),
		description: path.join(MAN_DESC,'floor.md'),
		reference: 'http://man.opencl.org/floor.html',
	},
fma:	{
		brief: 'Multiply and add, then round.',
		signature: path.join(MAN_SIG,'fma.txt'),
		description: path.join(MAN_DESC,'fma.md'),
		reference: 'http://man.opencl.org/fma.html',
	},
fmax:	{
		brief: 'Returns the greater of either `x` or `y`.',
		signature: path.join(MAN_SIG,'fmax.txt'),
		description: path.join(MAN_DESC,'fmax.md'),
		reference: 'http://man.opencl.org/fmax.html',
	},
fmin:	{
		brief: 'Returns the lessor of either `x` or `y`.',
		signature: path.join(MAN_SIG,'fmin.txt'),
		description: path.join(MAN_DESC,'fmin.md'),
		reference: 'http://man.opencl.org/fmin.html',
	},
fmod:	{
		brief: 'Modulus. Returns `x` - `y` \* [`trunc`](trunc.html) (`x`/`y`).',
		signature: path.join(MAN_SIG,'fmod.txt'),
		description: path.join(MAN_DESC,'fmod.md'),
		reference: 'http://man.opencl.org/fmod.html',
	},
fract:	{
		brief: 'Fractional value in `x`.',
		signature: path.join(MAN_SIG,'fract.txt'),
		description: path.join(MAN_DESC,'fract.md'),
		reference: 'http://man.opencl.org/fract.html',
	},
frexp:	{
		brief: 'Extract mantissa and exponent.',
		signature: path.join(MAN_SIG,'frexp.txt'),
		description: path.join(MAN_DESC,'frexp.md'),
		reference: 'http://man.opencl.org/frexp.html',
	},
hypot:	{
		brief: 'Square root of `x`<sup>2</sup> + `y`<sup>2</sup>.',
		signature: path.join(MAN_SIG,'hypot.txt'),
		description: path.join(MAN_DESC,'hypot.md'),
		reference: 'http://man.opencl.org/hypot.html',
	},
ilogb:	{
		brief: 'Exponent as an integer value.',
		signature: path.join(MAN_SIG,'ilogb.txt'),
		description: path.join(MAN_DESC,'ilogb.md'),
		reference: 'http://man.opencl.org/ilogb.html',
	},
ldexp:	{
		brief: 'Multiply `x` by 2 to the power `k`.',
		signature: path.join(MAN_SIG,'ldexp.txt'),
		description: path.join(MAN_DESC,'ldexp.md'),
		reference: 'http://man.opencl.org/ldexp.html',
	},
lgamma:	{
		brief: 'Log gamma functions.',
		signature: path.join(MAN_SIG,'lgamma.txt'),
		description: path.join(MAN_DESC,'lgamma.md'),
		reference: 'http://man.opencl.org/lgamma.html',
	},
lgamma_r:	{
		brief: 'Log gamma functions.',
		signature: path.join(MAN_SIG,'lgamma.txt'),
		description: path.join(MAN_DESC,'lgamma.md'),
		reference: 'http://man.opencl.org/lgamma.html',
	},
log:	{
		brief: 'Logarithm functions.',
		signature: path.join(MAN_SIG,'log.txt'),
		description: path.join(MAN_DESC,'log.md'),
		reference: 'http://man.opencl.org/log.html',
	},
log2:	{
		brief: 'Logarithm functions.',
		signature: path.join(MAN_SIG,'log.txt'),
		description: path.join(MAN_DESC,'log.md'),
		reference: 'http://man.opencl.org/log.html',
	},
log10:	{
		brief: 'Logarithm functions.',
		signature: path.join(MAN_SIG,'log.txt'),
		description: path.join(MAN_DESC,'log.md'),
		reference: 'http://man.opencl.org/log.html',
	},
log1p:	{
		brief: 'Logarithm functions.',
		signature: path.join(MAN_SIG,'log.txt'),
		description: path.join(MAN_DESC,'log.md'),
		reference: 'http://man.opencl.org/log.html',
	},
logb:	{
		brief: 'Logarithm functions.',
		signature: path.join(MAN_SIG,'log.txt'),
		description: path.join(MAN_DESC,'log.md'),
		reference: 'http://man.opencl.org/log.html',
	},
half_log:	{
		brief: 'Logarithm functions.',
		signature: path.join(MAN_SIG,'log.txt'),
		description: path.join(MAN_DESC,'log.md'),
		reference: 'http://man.opencl.org/log.html',
	},
half_log2:	{
		brief: 'Logarithm functions.',
		signature: path.join(MAN_SIG,'log.txt'),
		description: path.join(MAN_DESC,'log.md'),
		reference: 'http://man.opencl.org/log.html',
	},
half_log10:	{
		brief: 'Logarithm functions.',
		signature: path.join(MAN_SIG,'log.txt'),
		description: path.join(MAN_DESC,'log.md'),
		reference: 'http://man.opencl.org/log.html',
	},
native_log:	{
		brief: 'Logarithm functions.',
		signature: path.join(MAN_SIG,'log.txt'),
		description: path.join(MAN_DESC,'log.md'),
		reference: 'http://man.opencl.org/log.html',
	},
native_log2:	{
		brief: 'Logarithm functions.',
		signature: path.join(MAN_SIG,'log.txt'),
		description: path.join(MAN_DESC,'log.md'),
		reference: 'http://man.opencl.org/log.html',
	},
native_log10:	{
		brief: 'Logarithm functions.',
		signature: path.join(MAN_SIG,'log.txt'),
		description: path.join(MAN_DESC,'log.md'),
		reference: 'http://man.opencl.org/log.html',
	},
mad:	{
		brief: 'Approximates `a` \* `b` + `c`.',
		signature: path.join(MAN_SIG,'mad.txt'),
		description: path.join(MAN_DESC,'mad.md'),
		reference: 'http://man.opencl.org/mad.html',
	},
mag:	{
		brief: 'Returns the argument with the greatest (or least) magnitude.',
		signature: path.join(MAN_SIG,'mag.txt'),
		description: path.join(MAN_DESC,'mag.md'),
		reference: 'http://man.opencl.org/mag.html',
	},
maxmag:	{
		brief: 'Returns the argument with the greatest (or least) magnitude.',
		signature: path.join(MAN_SIG,'mag.txt'),
		description: path.join(MAN_DESC,'mag.md'),
		reference: 'http://man.opencl.org/mag.html',
	},
minmag:	{
		brief: 'Returns the argument with the greatest (or least) magnitude.',
		signature: path.join(MAN_SIG,'mag.txt'),
		description: path.join(MAN_DESC,'mag.md'),
		reference: 'http://man.opencl.org/mag.html',
	},
modf:	{
		brief: 'Decompose a floating-point number.',
		signature: path.join(MAN_SIG,'modf.txt'),
		description: path.join(MAN_DESC,'modf.md'),
		reference: 'http://man.opencl.org/modf.html',
	},
nan:	{
		brief: 'Quiet NaN',
		signature: path.join(MAN_SIG,'nan.txt'),
		description: path.join(MAN_DESC,'nan.md'),
		reference: 'http://man.opencl.org/nan.html',
	},
nextafter:	{
		brief: 'Next representable floating-point value following `x` in the direction of `y`.',
		signature: path.join(MAN_SIG,'nextafter.txt'),
		description: path.join(MAN_DESC,'nextafter.md'),
		reference: 'http://man.opencl.org/nextafter.html',
	},
pow:	{
		brief: 'Compute `x` to the power of `y`.',
		signature: path.join(MAN_SIG,'pow.txt'),
		description: path.join(MAN_DESC,'pow.md'),
		reference: 'http://man.opencl.org/pow.html',
	},
pown:	{
		brief: 'Compute `x` to the power of `y`.',
		signature: path.join(MAN_SIG,'pow.txt'),
		description: path.join(MAN_DESC,'pow.md'),
		reference: 'http://man.opencl.org/pow.html',
	},
powr:	{
		brief: 'Compute `x` to the power of `y`.',
		signature: path.join(MAN_SIG,'pow.txt'),
		description: path.join(MAN_DESC,'pow.md'),
		reference: 'http://man.opencl.org/pow.html',
	},
half_powr:	{
		brief: 'Compute `x` to the power of `y`.',
		signature: path.join(MAN_SIG,'pow.txt'),
		description: path.join(MAN_DESC,'pow.md'),
		reference: 'http://man.opencl.org/pow.html',
	},
native_powr:	{
		brief: 'Compute `x` to the power of `y`.',
		signature: path.join(MAN_SIG,'pow.txt'),
		description: path.join(MAN_DESC,'pow.md'),
		reference: 'http://man.opencl.org/pow.html',
	},
remainder:	{
		brief: 'Floating point remainder function.',
		signature: path.join(MAN_SIG,'remainder.txt'),
		description: path.join(MAN_DESC,'remainder.md'),
		reference: 'http://man.opencl.org/remainder.html',
	},
remquo:	{
		brief: 'Floating point remainder and quotient function.',
		signature: path.join(MAN_SIG,'remquo.txt'),
		description: path.join(MAN_DESC,'remquo.md'),
		reference: 'http://man.opencl.org/remquo.html',
	},
rint:	{
		brief: 'Round to nearest even integer.',
		signature: path.join(MAN_SIG,'rint.txt'),
		description: path.join(MAN_DESC,'rint.md'),
		reference: 'http://man.opencl.org/rint.html',
	},
rootn:	{
		brief: 'Compute `x` to the power 1/`y`.',
		signature: path.join(MAN_SIG,'rootn.txt'),
		description: path.join(MAN_DESC,'rootn.md'),
		reference: 'http://man.opencl.org/rootn.html',
	},
round:	{
		brief: 'Rounding function.',
		signature: path.join(MAN_SIG,'round.txt'),
		description: path.join(MAN_DESC,'round.md'),
		reference: 'http://man.opencl.org/round.html',
	},
sin:	{
		brief: 'Sine functions.',
		signature: path.join(MAN_SIG,'sin.txt'),
		description: path.join(MAN_DESC,'sin.md'),
		reference: 'http://man.opencl.org/sin.html',
	},
sincos:	{
		brief: 'Sine functions.',
		signature: path.join(MAN_SIG,'sin.txt'),
		description: path.join(MAN_DESC,'sin.md'),
		reference: 'http://man.opencl.org/sin.html',
	},
sinh:	{
		brief: 'Sine functions.',
		signature: path.join(MAN_SIG,'sin.txt'),
		description: path.join(MAN_DESC,'sin.md'),
		reference: 'http://man.opencl.org/sin.html',
	},
sinpi:	{
		brief: 'Sine functions.',
		signature: path.join(MAN_SIG,'sin.txt'),
		description: path.join(MAN_DESC,'sin.md'),
		reference: 'http://man.opencl.org/sin.html',
	},
half_sin:	{
		brief: 'Sine functions.',
		signature: path.join(MAN_SIG,'sin.txt'),
		description: path.join(MAN_DESC,'sin.md'),
		reference: 'http://man.opencl.org/sin.html',
	},
native_sin:	{
		brief: 'Sine functions.',
		signature: path.join(MAN_SIG,'sin.txt'),
		description: path.join(MAN_DESC,'sin.md'),
		reference: 'http://man.opencl.org/sin.html',
	},
sqrt:	{
		brief: 'Square root functions.',
		signature: path.join(MAN_SIG,'sqrt.txt'),
		description: path.join(MAN_DESC,'sqrt.md'),
		reference: 'http://man.opencl.org/sqrt.html',
	},
rsqrt:	{
		brief: 'Square root functions.',
		signature: path.join(MAN_SIG,'sqrt.txt'),
		description: path.join(MAN_DESC,'sqrt.md'),
		reference: 'http://man.opencl.org/sqrt.html',
	},
tan:	{
		brief: 'Tangent functions.',
		signature: path.join(MAN_SIG,'tan.txt'),
		description: path.join(MAN_DESC,'tan.md'),
		reference: 'http://man.opencl.org/tan.html',
	},
tanh:	{
		brief: 'Tangent functions.',
		signature: path.join(MAN_SIG,'tan.txt'),
		description: path.join(MAN_DESC,'tan.md'),
		reference: 'http://man.opencl.org/tan.html',
	},
divide:	{
		brief: 'Division functions.',
		signature: path.join(MAN_SIG,'divide.txt'),
		description: path.join(MAN_DESC,'divide.md'),
		reference: 'http://man.opencl.org/divide.html',
	},
half_divide:	{
		brief: 'Division functions.',
		signature: path.join(MAN_SIG,'divide.txt'),
		description: path.join(MAN_DESC,'divide.md'),
		reference: 'http://man.opencl.org/divide.html',
	},
native_divide:	{
		brief: 'Division functions.',
		signature: path.join(MAN_SIG,'divide.txt'),
		description: path.join(MAN_DESC,'divide.md'),
		reference: 'http://man.opencl.org/divide.html',
	},
recip:	{
		brief: 'Floating point reciprocal.',
		signature: path.join(MAN_SIG,'recip.txt'),
		description: path.join(MAN_DESC,'recip.md'),
		reference: 'http://man.opencl.org/recip.html',
	},
half_recip:	{
		brief: 'Floating point reciprocal.',
		signature: path.join(MAN_SIG,'recip.txt'),
		description: path.join(MAN_DESC,'recip.md'),
		reference: 'http://man.opencl.org/recip.html',
	},
native_recip:	{
		brief: 'Floating point reciprocal.',
		signature: path.join(MAN_SIG,'recip.txt'),
		description: path.join(MAN_DESC,'recip.md'),
		reference: 'http://man.opencl.org/recip.html',
	},
async_work_group_copy:	{
		brief: 'Perform an async copy.',
		signature: path.join(MAN_SIG,'async_work_group_copy.txt'),
		description: path.join(MAN_DESC,'async_work_group_copy.md'),
		reference: 'http://man.opencl.org/async_work_group_copy.html',
	},
async_work_group_strided_copy:	{
		brief: 'Performs an async gather of `num_elements` `gentype` elements from source to destination.',
		signature: path.join(MAN_SIG,'async_work_group_strided_copy.txt'),
		description: path.join(MAN_DESC,'async_work_group_strided_copy.md'),
		reference: 'http://man.opencl.org/async_work_group_strided_copy.html',
	},
wait_group_events:	{
		brief: 'Wait for events that identify the `async_work_group_copy` operations to complete.',
		signature: path.join(MAN_SIG,'wait_group_events.txt'),
		description: path.join(MAN_DESC,'wait_group_events.md'),
		reference: 'http://man.opencl.org/wait_group_events.html',
	},
prefetch:	{
		brief: 'Prefetch bytes into the global cache.',
		signature: path.join(MAN_SIG,'prefetch.txt'),
		description: path.join(MAN_DESC,'prefetch.md'),
		reference: 'http://man.opencl.org/prefetch.html',
	},
atomic_init:	{
		brief: 'Non-atomically initializes an atomic object pointed to by `obj` to a specified value.',
		signature: path.join(MAN_SIG,'atomic_init.txt'),
		description: path.join(MAN_DESC,'atomic_init.md'),
		reference: 'http://man.opencl.org/atomic_init.html',
	},
atomic_work_item_fence:	{
		brief: 'atomic\_work\_item\_fence functions.',
		signature: path.join(MAN_SIG,'atomic_work_item_fence.txt'),
		description: path.join(MAN_DESC,'atomic_work_item_fence.md'),
		reference: 'http://man.opencl.org/atomic_work_item_fence.html',
	},
atomic_store:	{
		brief: 'atomic\_store, atomic\_store\_explicit functions.',
		signature: path.join(MAN_SIG,'atomic_store.txt'),
		description: path.join(MAN_DESC,'atomic_store.md'),
		reference: 'http://man.opencl.org/atomic_store.html',
	},
atomic_store_explicit:	{
		brief: 'atomic\_store, atomic\_store\_explicit functions.',
		signature: path.join(MAN_SIG,'atomic_store.txt'),
		description: path.join(MAN_DESC,'atomic_store.md'),
		reference: 'http://man.opencl.org/atomic_store.html',
	},
atomic_exchange:	{
		brief: 'atomic\_store, atomic\_store\_explicit functions.',
		signature: path.join(MAN_SIG,'atomic_store.txt'),
		description: path.join(MAN_DESC,'atomic_store.md'),
		reference: 'http://man.opencl.org/atomic_store.html',
	},
atomic_exchange_explicit:	{
		brief: 'atomic\_store, atomic\_store\_explicit functions.',
		signature: path.join(MAN_SIG,'atomic_store.txt'),
		description: path.join(MAN_DESC,'atomic_store.md'),
		reference: 'http://man.opencl.org/atomic_store.html',
	},
atomic_compare_exchange:	{
		brief: 'atomic\_compare\_exchange functions.',
		signature: path.join(MAN_SIG,'atomic_compare_exchange.txt'),
		description: path.join(MAN_DESC,'atomic_compare_exchange.md'),
		reference: 'http://man.opencl.org/atomic_compare_exchange.html',
	},
atomic_compare_exchange_strong:	{
		brief: 'atomic\_compare\_exchange functions.',
		signature: path.join(MAN_SIG,'atomic_compare_exchange.txt'),
		description: path.join(MAN_DESC,'atomic_compare_exchange.md'),
		reference: 'http://man.opencl.org/atomic_compare_exchange.html',
	},
atomic_compare_exchange_strong_explicit:	{
		brief: 'atomic\_compare\_exchange functions.',
		signature: path.join(MAN_SIG,'atomic_compare_exchange.txt'),
		description: path.join(MAN_DESC,'atomic_compare_exchange.md'),
		reference: 'http://man.opencl.org/atomic_compare_exchange.html',
	},
atomic_compare_exchange_weak:	{
		brief: 'atomic\_compare\_exchange functions.',
		signature: path.join(MAN_SIG,'atomic_compare_exchange.txt'),
		description: path.join(MAN_DESC,'atomic_compare_exchange.md'),
		reference: 'http://man.opencl.org/atomic_compare_exchange.html',
	},
atomic_compare_exchange_weak_explicit:	{
		brief: 'atomic\_compare\_exchange functions.',
		signature: path.join(MAN_SIG,'atomic_compare_exchange.txt'),
		description: path.join(MAN_DESC,'atomic_compare_exchange.md'),
		reference: 'http://man.opencl.org/atomic_compare_exchange.html',
	},
atomic_fetch_key:	{
		brief: 'Atomically replace the value pointed to by `object` with the result of the computation.',
		signature: path.join(MAN_SIG,'atomic_fetch_key.txt'),
		description: path.join(MAN_DESC,'atomic_fetch_key.md'),
		reference: 'http://man.opencl.org/atomic_fetch_key.html',
	},
atomic_fetch_key_explicit:	{
		brief: 'Atomically replace the value pointed to by `object` with the result of the computation.',
		signature: path.join(MAN_SIG,'atomic_fetch_key.txt'),
		description: path.join(MAN_DESC,'atomic_fetch_key.md'),
		reference: 'http://man.opencl.org/atomic_fetch_key.html',
	},
atomic_flag_test_and_set:	{
		brief: 'Atomically sets the value pointed to by `object` to true.',
		signature: path.join(MAN_SIG,'atomic_flag_test_and_set.txt'),
		description: path.join(MAN_DESC,'atomic_flag_test_and_set.md'),
		reference: 'http://man.opencl.org/atomic_flag_test_and_set.html',
	},
atomic_flag_test_and_set_explicit:	{
		brief: 'Atomically sets the value pointed to by `object` to true.',
		signature: path.join(MAN_SIG,'atomic_flag_test_and_set.txt'),
		description: path.join(MAN_DESC,'atomic_flag_test_and_set.md'),
		reference: 'http://man.opencl.org/atomic_flag_test_and_set.html',
	},
atomic_flag_clear:	{
		brief: 'Atomically sets the value pointed to by `object` to true.',
		signature: path.join(MAN_SIG,'atomic_flag_clear.txt'),
		description: path.join(MAN_DESC,'atomic_flag_clear.md'),
		reference: 'http://man.opencl.org/atomic_flag_clear.html',
	},
atomic_flag_clear_explicit:	{
		brief: 'Atomically sets the value pointed to by `object` to true.',
		signature: path.join(MAN_SIG,'atomic_flag_clear.txt'),
		description: path.join(MAN_DESC,'atomic_flag_clear.md'),
		reference: 'http://man.opencl.org/atomic_flag_clear.html',
	},
clamp_common:	{
		brief: 'Clamp `x` to range given by `min`, `max`',
		signature: path.join(MAN_SIG,'clamp_common.txt'),
		description: path.join(MAN_DESC,'clamp_common.md'),
		reference: 'http://man.opencl.org/clamp_common.html',
	},
clamp:	{
		brief: 'Clamp `x` to range given by `min`, `max`',
		signature: path.join(MAN_SIG,'clamp_common.txt'),
		description: path.join(MAN_DESC,'clamp_common.md'),
		reference: 'http://man.opencl.org/clamp_common.html',
	},
degrees:	{
		brief: 'Converts radians to degrees.',
		signature: path.join(MAN_SIG,'degrees.txt'),
		description: path.join(MAN_DESC,'degrees.md'),
		reference: 'http://man.opencl.org/degrees.html',
	},
commonMax:	{
		brief: 'Returns the greater of two values.',
		signature: path.join(MAN_SIG,'commonMax.txt'),
		description: path.join(MAN_DESC,'commonMax.md'),
		reference: 'http://man.opencl.org/commonMax.html',
	},
max:	{
		brief: 'Returns the greater of two values.',
		signature: path.join(MAN_SIG,'commonMax.txt'),
		description: path.join(MAN_DESC,'commonMax.md'),
		reference: 'http://man.opencl.org/commonMax.html',
	},
commonMin:	{
		brief: 'Returns the lesser of two values.',
		signature: path.join(MAN_SIG,'commonMin.txt'),
		description: path.join(MAN_DESC,'commonMin.md'),
		reference: 'http://man.opencl.org/commonMin.html',
	},
min:	{
		brief: 'Returns the lesser of two values.',
		signature: path.join(MAN_SIG,'commonMin.txt'),
		description: path.join(MAN_DESC,'commonMin.md'),
		reference: 'http://man.opencl.org/commonMin.html',
	},
mix:	{
		brief: 'Linear blend of `x` and `y`.',
		signature: path.join(MAN_SIG,'mix.txt'),
		description: path.join(MAN_DESC,'mix.md'),
		reference: 'http://man.opencl.org/mix.html',
	},
radians:	{
		brief: 'Converts degrees to radians.',
		signature: path.join(MAN_SIG,'radians.txt'),
		description: path.join(MAN_DESC,'radians.md'),
		reference: 'http://man.opencl.org/radians.html',
	},
sign:	{
		brief: 'Sign of a value.',
		signature: path.join(MAN_SIG,'sign.txt'),
		description: path.join(MAN_DESC,'sign.md'),
		reference: 'http://man.opencl.org/sign.html',
	},
smoothstep:	{
		brief: 'Step and interpolate.',
		signature: path.join(MAN_SIG,'smoothstep.txt'),
		description: path.join(MAN_DESC,'smoothstep.md'),
		reference: 'http://man.opencl.org/smoothstep.html',
	},
step:	{
		brief: 'Returns 0.0 if `x` &lt; `edge`, else 1.0.',
		signature: path.join(MAN_SIG,'step.txt'),
		description: path.join(MAN_DESC,'step.md'),
		reference: 'http://man.opencl.org/step.html',
	},
retain_event:	{
		brief: 'Increments the event reference count.',
		signature: path.join(MAN_SIG,'retain_event.txt'),
		description: path.join(MAN_DESC,'retain_event.md'),
		reference: 'http://man.opencl.org/retain_event.html',
	},
release_event:	{
		brief: 'Decrements the event reference count.',
		signature: path.join(MAN_SIG,'release_event.txt'),
		description: path.join(MAN_DESC,'release_event.md'),
		reference: 'http://man.opencl.org/release_event.html',
	},
create_user_event:	{
		brief: 'Creates and returns a user event.',
		signature: path.join(MAN_SIG,'create_user_event.txt'),
		description: path.join(MAN_DESC,'create_user_event.md'),
		reference: 'http://man.opencl.org/create_user_event.html',
	},
is_valid_event:	{
		brief: 'Returns true if event is a valid event.',
		signature: path.join(MAN_SIG,'is_valid_event.txt'),
		description: path.join(MAN_DESC,'is_valid_event.md'),
		reference: 'http://man.opencl.org/is_valid_event.html',
	},
set_user_event_status:	{
		brief: 'Sets the execution status of a user event.',
		signature: path.join(MAN_SIG,'set_user_event_status.txt'),
		description: path.join(MAN_DESC,'set_user_event_status.md'),
		reference: 'http://man.opencl.org/set_user_event_status.html',
	},
capture_event_profiling_info:	{
		brief: 'Captures the profiling information for command associated with `event`.',
		signature: path.join(MAN_SIG,'capture_event_profiling_info.txt'),
		description: path.join(MAN_DESC,'capture_event_profiling_info.md'),
		reference: 'http://man.opencl.org/capture_event_profiling_info.html',
	},
cross:	{
		brief: 'Cross product.',
		signature: path.join(MAN_SIG,'cross.txt'),
		description: path.join(MAN_DESC,'cross.md'),
		reference: 'http://man.opencl.org/cross.html',
	},
dot:	{
		brief: 'Dot product.',
		signature: path.join(MAN_SIG,'dot.txt'),
		description: path.join(MAN_DESC,'dot.md'),
		reference: 'http://man.opencl.org/dot.html',
	},
distance:	{
		brief: 'Vector distance.',
		signature: path.join(MAN_SIG,'distance.txt'),
		description: path.join(MAN_DESC,'distance.md'),
		reference: 'http://man.opencl.org/distance.html',
	},
length:	{
		brief: 'Vector length.',
		signature: path.join(MAN_SIG,'length.txt'),
		description: path.join(MAN_DESC,'length.md'),
		reference: 'http://man.opencl.org/length.html',
	},
normalize:	{
		brief: 'Normal vector length 1.',
		signature: path.join(MAN_SIG,'normalize.txt'),
		description: path.join(MAN_DESC,'normalize.md'),
		reference: 'http://man.opencl.org/normalize.html',
	},
fast_distance:	{
		brief: 'Vector distance.',
		signature: path.join(MAN_SIG,'fast_distance.txt'),
		description: path.join(MAN_DESC,'fast_distance.md'),
		reference: 'http://man.opencl.org/fast_distance.html',
	},
fast_length:	{
		brief: 'Vector length.',
		signature: path.join(MAN_SIG,'fast_length.txt'),
		description: path.join(MAN_DESC,'fast_length.md'),
		reference: 'http://man.opencl.org/fast_length.html',
	},
fast_normalize:	{
		brief: 'Normal vector length 1.',
		signature: path.join(MAN_SIG,'fast_normalize.txt'),
		description: path.join(MAN_DESC,'fast_normalize.md'),
		reference: 'http://man.opencl.org/fast_normalize.html',
	},
get_image_width:	{
		brief: 'Return the image width in pixels.',
		signature: path.join(MAN_SIG,'get_image_width.txt'),
		description: path.join(MAN_DESC,'get_image_width.md'),
		reference: 'http://man.opencl.org/get_image_width.html',
	},
get_image_height:	{
		brief: 'Return the image height in pixels.',
		signature: path.join(MAN_SIG,'get_image_height.txt'),
		description: path.join(MAN_DESC,'get_image_height.md'),
		reference: 'http://man.opencl.org/get_image_height.html',
	},
get_image_depth:	{
		brief: 'Return the 3D image depth in pixels.',
		signature: path.join(MAN_SIG,'get_image_depth.txt'),
		description: path.join(MAN_DESC,'get_image_depth.md'),
		reference: 'http://man.opencl.org/get_image_depth.html',
	},
get_image_channel_data_type:	{
		brief: 'Return the channel data type.',
		signature: path.join(MAN_SIG,'get_image_channel_data_type.txt'),
		description: path.join(MAN_DESC,'get_image_channel_data_type.md'),
		reference: 'http://man.opencl.org/get_image_channel_data_type.html',
	},
get_image_channel_order:	{
		brief: 'Return the image channel data order.',
		signature: path.join(MAN_SIG,'get_image_channel_order.txt'),
		description: path.join(MAN_DESC,'get_image_channel_order.md'),
		reference: 'http://man.opencl.org/get_image_channel_order.html',
	},
get_image_dim:	{
		brief: 'Return the image dimensions.',
		signature: path.join(MAN_SIG,'get_image_dim.txt'),
		description: path.join(MAN_DESC,'get_image_dim.md'),
		reference: 'http://man.opencl.org/get_image_dim.html',
	},
get_image_array_size:	{
		brief: 'Return the number of images in an image array.',
		signature: path.join(MAN_SIG,'get_image_array_size.txt'),
		description: path.join(MAN_DESC,'get_image_array_size.md'),
		reference: 'http://man.opencl.org/get_image_array_size.html',
	},
get_image_num_mip_levels:	{
		brief: 'Return the number of mip-levels.',
		signature: path.join(MAN_SIG,'get_image_num_mip_levels.txt'),
		description: path.join(MAN_DESC,'get_image_num_mip_levels.md'),
		reference: 'http://man.opencl.org/get_image_num_mip_levels.html',
	},
get_image_num_samples:	{
		brief: 'Return the number of samples in the 2D MSAA image.',
		signature: path.join(MAN_SIG,'get_image_num_samples.txt'),
		description: path.join(MAN_DESC,'get_image_num_samples.md'),
		reference: 'http://man.opencl.org/get_image_num_samples.html',
	},
abs:	{
		brief: 'Absolute value functions.',
		signature: path.join(MAN_SIG,'abs.txt'),
		description: path.join(MAN_DESC,'abs.md'),
		reference: 'http://man.opencl.org/abs.html',
	},
abs_diff:	{
		brief: 'Absolute value functions.',
		signature: path.join(MAN_SIG,'abs.txt'),
		description: path.join(MAN_DESC,'abs.md'),
		reference: 'http://man.opencl.org/abs.html',
	},
add_sat:	{
		brief: 'Add two values and saturate the result.',
		signature: path.join(MAN_SIG,'add_sat.txt'),
		description: path.join(MAN_DESC,'add_sat.md'),
		reference: 'http://man.opencl.org/add_sat.html',
	},
hadd:	{
		brief: 'Returns (`x` + `y`) &gt;&gt; 1, or (`x` + `y` + 1) &gt;&gt; 1',
		signature: path.join(MAN_SIG,'hadd.txt'),
		description: path.join(MAN_DESC,'hadd.md'),
		reference: 'http://man.opencl.org/hadd.html',
	},
rhadd:	{
		brief: 'Returns (`x` + `y`) &gt;&gt; 1, or (`x` + `y` + 1) &gt;&gt; 1',
		signature: path.join(MAN_SIG,'hadd.txt'),
		description: path.join(MAN_DESC,'hadd.md'),
		reference: 'http://man.opencl.org/hadd.html',
	},
clamp_integer:	{
		brief: 'Clamp `x` to range given by `minval`, `maxval`.',
		signature: path.join(MAN_SIG,'clamp_integer.txt'),
		description: path.join(MAN_DESC,'clamp_integer.md'),
		reference: 'http://man.opencl.org/clamp_integer.html',
	},
clamp:	{
		brief: 'Clamp `x` to range given by `minval`, `maxval`.',
		signature: path.join(MAN_SIG,'clamp_integer.txt'),
		description: path.join(MAN_DESC,'clamp_integer.md'),
		reference: 'http://man.opencl.org/clamp_integer.html',
	},
clz:	{
		brief: 'Returns the number of leading 0-bits in `x`.',
		signature: path.join(MAN_SIG,'clz.txt'),
		description: path.join(MAN_DESC,'clz.md'),
		reference: 'http://man.opencl.org/clz.html',
	},
ctz:	{
		brief: 'Returns the number of leading 0-bits in `x`.',
		signature: path.join(MAN_SIG,'ctz.txt'),
		description: path.join(MAN_DESC,'ctz.md'),
		reference: 'http://man.opencl.org/ctz.html',
	},
mad_hi:	{
		brief: 'Returns [`mul_hi`](mul_hi.html)(`a`, `b`) + `c`.',
		signature: path.join(MAN_SIG,'mad_hi.txt'),
		description: path.join(MAN_DESC,'mad_hi.md'),
		reference: 'http://man.opencl.org/mad_hi.html',
	},
mad24:	{
		brief: 'Fast integer function to multiply 24-bit integers and add a 32-bit value.',
		signature: path.join(MAN_SIG,'mad24.txt'),
		description: path.join(MAN_DESC,'mad24.md'),
		reference: 'http://man.opencl.org/mad24.html',
	},
mad_sat:	{
		brief: 'Returns `a`\*`b`+`c` and saturates the result.',
		signature: path.join(MAN_SIG,'mad_sat.txt'),
		description: path.join(MAN_DESC,'mad_sat.md'),
		reference: 'http://man.opencl.org/mad_sat.html',
	},
integerMax:	{
		brief: 'Returns the greater or lesser of `x` or `y`.',
		signature: path.join(MAN_SIG,'integerMax.txt'),
		description: path.join(MAN_DESC,'integerMax.md'),
		reference: 'http://man.opencl.org/integerMax.html',
	},
max:	{
		brief: 'Returns the greater or lesser of `x` or `y`.',
		signature: path.join(MAN_SIG,'integerMax.txt'),
		description: path.join(MAN_DESC,'integerMax.md'),
		reference: 'http://man.opencl.org/integerMax.html',
	},
min:	{
		brief: 'Returns the greater or lesser of `x` or `y`.',
		signature: path.join(MAN_SIG,'integerMax.txt'),
		description: path.join(MAN_DESC,'integerMax.md'),
		reference: 'http://man.opencl.org/integerMax.html',
	},
mul_hi:	{
		brief: 'Returns the high half of the product of `x` and `y`.',
		signature: path.join(MAN_SIG,'mul_hi.txt'),
		description: path.join(MAN_DESC,'mul_hi.md'),
		reference: 'http://man.opencl.org/mul_hi.html',
	},
mul24:	{
		brief: 'Fast integer function to multiply 24-bit integer values.',
		signature: path.join(MAN_SIG,'mul24.txt'),
		description: path.join(MAN_DESC,'mul24.md'),
		reference: 'http://man.opencl.org/mul24.html',
	},
rotate:	{
		brief: 'Rotate bits left.',
		signature: path.join(MAN_SIG,'rotate.txt'),
		description: path.join(MAN_DESC,'rotate.md'),
		reference: 'http://man.opencl.org/rotate.html',
	},
sub_sat:	{
		brief: 'Returns `x` - `y` and saturates the result.',
		signature: path.join(MAN_SIG,'sub_sat.txt'),
		description: path.join(MAN_DESC,'sub_sat.md'),
		reference: 'http://man.opencl.org/sub_sat.html',
	},
upsample:	{
		brief: 'result\[i\] = ((gentype)hi\[i\] &lt;&lt; 8|16|32) | lo\[i\]',
		signature: path.join(MAN_SIG,'upsample.txt'),
		description: path.join(MAN_DESC,'upsample.md'),
		reference: 'http://man.opencl.org/upsample.html',
	},
popcount:	{
		brief: 'Returns the number of non-zero bits in `x`.',
		signature: path.join(MAN_SIG,'popcount.txt'),
		description: path.join(MAN_DESC,'popcount.md'),
		reference: 'http://man.opencl.org/popcount.html',
	},
vec_step:	{
		brief: 'Takes a built-in scalar or vector data type argument and returns an integer value representing the number of elements in the scalar or vector.',
		signature: path.join(MAN_SIG,'vec_step.txt'),
		description: path.join(MAN_DESC,'vec_step.md'),
		reference: 'http://man.opencl.org/vec_step.html',
	},
shuffle:	{
		brief: 'Constructs a permutation of elements from one (or two) input vectors.',
		signature: path.join(MAN_SIG,'shuffle.txt'),
		description: path.join(MAN_DESC,'shuffle.md'),
		reference: 'http://man.opencl.org/shuffle.html',
	},
shuffle2:	{
		brief: 'Constructs a permutation of elements from one (or two) input vectors.',
		signature: path.join(MAN_SIG,'shuffle.txt'),
		description: path.join(MAN_DESC,'shuffle.md'),
		reference: 'http://man.opencl.org/shuffle.html',
	},
isequal:	{
		brief: 'Compare of `x` == `y`.',
		signature: path.join(MAN_SIG,'isequal.txt'),
		description: path.join(MAN_DESC,'isequal.md'),
		reference: 'http://man.opencl.org/isequal.html',
	},
isnotequal:	{
		brief: 'Compare of `x` != `y`.',
		signature: path.join(MAN_SIG,'isnotequal.txt'),
		description: path.join(MAN_DESC,'isnotequal.md'),
		reference: 'http://man.opencl.org/isnotequal.html',
	},
isgreater:	{
		brief: 'Compare of `x` &gt; `y`.',
		signature: path.join(MAN_SIG,'isgreater.txt'),
		description: path.join(MAN_DESC,'isgreater.md'),
		reference: 'http://man.opencl.org/isgreater.html',
	},
isgreaterequal:	{
		brief: 'Compare of `x` &gt;= `y`.',
		signature: path.join(MAN_SIG,'isgreaterequal.txt'),
		description: path.join(MAN_DESC,'isgreaterequal.md'),
		reference: 'http://man.opencl.org/isgreaterequal.html',
	},
isless:	{
		brief: 'Compare of `x` &lt; `y`.',
		signature: path.join(MAN_SIG,'isless.txt'),
		description: path.join(MAN_DESC,'isless.md'),
		reference: 'http://man.opencl.org/isless.html',
	},
islessequal:	{
		brief: 'Compare of `x` ⇐ `y`.',
		signature: path.join(MAN_SIG,'islessequal.txt'),
		description: path.join(MAN_DESC,'islessequal.md'),
		reference: 'http://man.opencl.org/islessequal.html',
	},
islessgreater:	{
		brief: 'Compare of (`x` &lt; `y`) || (`x` &gt; `y`).',
		signature: path.join(MAN_SIG,'islessgreater.txt'),
		description: path.join(MAN_DESC,'islessgreater.md'),
		reference: 'http://man.opencl.org/islessgreater.html',
	},
isfinite:	{
		brief: 'Test for finite value.',
		signature: path.join(MAN_SIG,'isfinite.txt'),
		description: path.join(MAN_DESC,'isfinite.md'),
		reference: 'http://man.opencl.org/isfinite.html',
	},
isinf:	{
		brief: 'Test for infinity value.',
		signature: path.join(MAN_SIG,'isinf.txt'),
		description: path.join(MAN_DESC,'isinf.md'),
		reference: 'http://man.opencl.org/isinf.html',
	},
isnan:	{
		brief: 'Test for a NaN.',
		signature: path.join(MAN_SIG,'isnan.txt'),
		description: path.join(MAN_DESC,'isnan.md'),
		reference: 'http://man.opencl.org/isnan.html',
	},
isnormal:	{
		brief: 'Test for a normal value.',
		signature: path.join(MAN_SIG,'isnormal.txt'),
		description: path.join(MAN_DESC,'isnormal.md'),
		reference: 'http://man.opencl.org/isnormal.html',
	},
isordered:	{
		brief: 'Test if arguments are ordered.',
		signature: path.join(MAN_SIG,'isordered.txt'),
		description: path.join(MAN_DESC,'isordered.md'),
		reference: 'http://man.opencl.org/isordered.html',
	},
isunordered:	{
		brief: 'Test if arguments are unordered.',
		signature: path.join(MAN_SIG,'isunordered.txt'),
		description: path.join(MAN_DESC,'isunordered.md'),
		reference: 'http://man.opencl.org/isunordered.html',
	},
signbit:	{
		brief: 'Test for sign bit.',
		signature: path.join(MAN_SIG,'signbit.txt'),
		description: path.join(MAN_DESC,'signbit.md'),
		reference: 'http://man.opencl.org/signbit.html',
	},
any:	{
		brief: 'Test for sign bit.',
		signature: path.join(MAN_SIG,'any.txt'),
		description: path.join(MAN_DESC,'any.md'),
		reference: 'http://man.opencl.org/any.html',
	},
all:	{
		brief: 'Test for sign bit.',
		signature: path.join(MAN_SIG,'any.txt'),
		description: path.join(MAN_DESC,'any.md'),
		reference: 'http://man.opencl.org/any.html',
	},
bitselect:	{
		brief: 'Each bit of result is corresponding bit of `a` if corresponding bit of `c` is 0.',
		signature: path.join(MAN_SIG,'bitselect.txt'),
		description: path.join(MAN_DESC,'bitselect.md'),
		reference: 'http://man.opencl.org/bitselect.html',
	},
select:	{
		brief: 'For each component of a vector type, result\[`i`\] = if MSB of `c`\[`i`\] is set ? `b`\[`i`\] : `a`\[`i`\]. For scalar type, *result* = `c` ? `b` : `a`.',
		signature: path.join(MAN_SIG,'select.txt'),
		description: path.join(MAN_DESC,'select.md'),
		reference: 'http://man.opencl.org/select.html',
	},
work_group_barrier:	{
		brief: 'All work-items in a work-group executing the kernel on a processor must execute this function before any are allowed to continue execution beyond the work\_group\_barrier.',
		signature: path.join(MAN_SIG,'work_group_barrier.txt'),
		description: path.join(MAN_DESC,'work_group_barrier.md'),
		reference: 'http://man.opencl.org/work_group_barrier.html',
	},
barrier:	{
		brief: 'See [`work_group_barrier`](work_group_barrier.html).',
		signature: path.join(MAN_SIG,'barrier.txt'),
		description: path.join(MAN_DESC,'barrier.md'),
		reference: 'http://man.opencl.org/barrier.html',
	},
vloadn:	{
		brief: 'Read vectors from a pointer to memory.',
		signature: path.join(MAN_SIG,'vloadn.txt'),
		description: path.join(MAN_DESC,'vloadn.md'),
		reference: 'http://man.opencl.org/vloadn.html',
	},
vstoren:	{
		brief: 'Write sizeof bytes (`gentypen`) to memory.',
		signature: path.join(MAN_SIG,'vstoren.txt'),
		description: path.join(MAN_DESC,'vstoren.md'),
		reference: 'http://man.opencl.org/vstoren.html',
	},
vload_half:	{
		brief: 'Read a half float from a pointer to memory.',
		signature: path.join(MAN_SIG,'vload_half.txt'),
		description: path.join(MAN_DESC,'vload_half.md'),
		reference: 'http://man.opencl.org/vload_half.html',
	},
vload_halfn:	{
		brief: 'Read a half float vector from a pointer to memory.',
		signature: path.join(MAN_SIG,'vload_halfn.txt'),
		description: path.join(MAN_DESC,'vload_halfn.md'),
		reference: 'http://man.opencl.org/vload_halfn.html',
	},
vstore_half:	{
		brief: 'Convert float to half and write to a pointer to memory.',
		signature: path.join(MAN_SIG,'vstore_half.txt'),
		description: path.join(MAN_DESC,'vstore_half.md'),
		reference: 'http://man.opencl.org/vstore_half.html',
	},
vstore_halfn:	{
		brief: 'Convert float vector to half vector and write to a pointer to memory.',
		signature: path.join(MAN_SIG,'vstore_halfn.txt'),
		description: path.join(MAN_DESC,'vstore_halfn.md'),
		reference: 'http://man.opencl.org/vstore_halfn.html',
	},
vloada_halfn:	{
		brief: 'Read half float vector from a pointer to memory.',
		signature: path.join(MAN_SIG,'vloada_halfn.txt'),
		description: path.join(MAN_DESC,'vloada_halfn.md'),
		reference: 'http://man.opencl.org/vloada_halfn.html',
	},
vstorea_halfn:	{
		brief: 'Convert float vector to half vector and write to a pointer to memory.',
		signature: path.join(MAN_SIG,'vstorea_halfn.txt'),
		description: path.join(MAN_DESC,'vstorea_halfn.md'),
		reference: 'http://man.opencl.org/vstorea_halfn.html',
	},
get_work_dim:	{
		brief: 'Returns the number of dimensions in use.',
		signature: path.join(MAN_SIG,'get_work_dim.txt'),
		description: path.join(MAN_DESC,'get_work_dim.md'),
		reference: 'http://man.opencl.org/get_work_dim.html',
	},
get_global_size:	{
		brief: 'Returns the number of global work-items specified for dimension identified by `dimindx`.',
		signature: path.join(MAN_SIG,'get_global_size.txt'),
		description: path.join(MAN_DESC,'get_global_size.md'),
		reference: 'http://man.opencl.org/get_global_size.html',
	},
get_global_id:	{
		brief: 'Returns the unique global work-item ID value for dimension identified by `dimindx`.',
		signature: path.join(MAN_SIG,'get_global_id.txt'),
		description: path.join(MAN_DESC,'get_global_id.md'),
		reference: 'http://man.opencl.org/get_global_id.html',
	},
get_local_size:	{
		brief: 'Returns the number of local work-items in the specified dimension.',
		signature: path.join(MAN_SIG,'get_local_size.txt'),
		description: path.join(MAN_DESC,'get_local_size.md'),
		reference: 'http://man.opencl.org/get_local_size.html',
	},
get_enqueued_local_size:	{
		brief: 'Same as get\_local\_size(dimindx) if the kernel is executed with a uniform work-group size.',
		signature: path.join(MAN_SIG,'get_enqueued_local_size.txt'),
		description: path.join(MAN_DESC,'get_enqueued_local_size.md'),
		reference: 'http://man.opencl.org/get_enqueued_local_size.html',
	},
get_local_id:	{
		brief: 'Returns the unique local work-item ID.',
		signature: path.join(MAN_SIG,'get_local_id.txt'),
		description: path.join(MAN_DESC,'get_local_id.md'),
		reference: 'http://man.opencl.org/get_local_id.html',
	},
get_num_groups:	{
		brief: 'Returns the number of work-groups that will execute a kernel for a specified dimension.',
		signature: path.join(MAN_SIG,'get_num_groups.txt'),
		description: path.join(MAN_DESC,'get_num_groups.md'),
		reference: 'http://man.opencl.org/get_num_groups.html',
	},
get_group_id:	{
		brief: 'Returns the work-group ID.',
		signature: path.join(MAN_SIG,'get_group_id.txt'),
		description: path.join(MAN_DESC,'get_group_id.md'),
		reference: 'http://man.opencl.org/get_group_id.html',
	},
get_global_offset:	{
		brief: 'Returns the offset values specified in `global_work_offset` argument to [`clEnqueueNDRangeKernel`](clEnqueueNDRangeKernel.html).',
		signature: path.join(MAN_SIG,'get_global_offset.txt'),
		description: path.join(MAN_DESC,'get_global_offset.md'),
		reference: 'http://man.opencl.org/get_global_offset.html',
	},
get_global_linear_id:	{
		brief: 'Returns the work-items 1-dimensional global ID.',
		signature: path.join(MAN_SIG,'get_global_linear_id.txt'),
		description: path.join(MAN_DESC,'get_global_linear_id.md'),
		reference: 'http://man.opencl.org/get_global_linear_id.html',
	},
get_local_linear_id:	{
		brief: 'Returns the work-items 1-dimensional global ID.',
		signature: path.join(MAN_SIG,'get_local_linear_id.txt'),
		description: path.join(MAN_DESC,'get_local_linear_id.md'),
		reference: 'http://man.opencl.org/get_local_linear_id.html',
	}
};